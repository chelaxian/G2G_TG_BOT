import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
from telegram.error import BadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
with open("bot_token.txt", "r") as f:
    TOKEN = f.read().strip()

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
USERS_FILE = "users.txt"
ADMINS_FILE = "admins.txt"

# –ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π
states = {}

def load_groups(filename: str):
    try:
        with open(filename, "r") as f:
            groups = [line.strip() for line in f if line.strip()]
            if not groups:
                logger.warning(f"–§–∞–π–ª {filename} –ø—É—Å—Ç")
            return groups
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return []

def update_file(filename: str, chat_id: str, add: bool = True):
    try:
        with open(filename, "r+") as f:
            ids = {line.strip() for line in f}
            if add:
                ids.add(chat_id)
            else:
                ids.discard(chat_id)
            f.seek(0)
            f.truncate()
            f.write("\n".join(ids))
        return True
    except Exception as e:
        logger.error(f"Error updating file {filename}: {e}")
        return False

async def check_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∞–¥–º–∏–Ω—Å–∫–∏–º, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø –∏–∑ admins.txt.
    """
    chat_id = str(update.effective_chat.id)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –≥—Ä—É–ø–ø
    admin_chats = set(load_groups(ADMINS_FILE))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –≥—Ä—É–ø–ø
    return chat_id in admin_chats

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        return
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

async def toggle_mode(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: bool):
    chat_id = str(update.effective_chat.id)
    user_chats = set(load_groups(USERS_FILE))
    admin_chats = set(load_groups(ADMINS_FILE))

    is_user_chat = chat_id in user_chats
    is_admin_chat = chat_id in admin_chats

    if not (is_user_chat or is_admin_chat):
        #await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä—É–ø–ø—ã
    group_type = "üë®üèª‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π" if is_user_chat else "üë®üèª‚Äçüîß –ê–¥–º–∏–Ω—Å–∫–∏–π"
    states[chat_id] = mode
    status = "–í–ö–õ–Æ–ß–ï–ù ‚úÖ" if mode else "–í–´–ö–õ–Æ–ß–ï–ù ‚ùå"
    await update.message.reply_text(f"{group_type} —Ä–µ–∂–∏–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π {status}")

async def on_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await toggle_mode(update, context, True)

async def off_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await toggle_mode(update, context, False)

async def all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update, context):
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    if not context.args:
        await update.message.reply_text("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /all [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]")
        return

    admin = update.message.from_user
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    header = (
        f"‚ùóÔ∏è –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @{escape_markdownv2(admin.username)}\n"
        f"–ì—Ä—É–ø–ø–∞: *{escape_markdownv2(update.effective_chat.title)}*\n"
        f"ID –≥—Ä—É–ø–ø—ã: `{update.message.chat.id}`"
    )
    user_chats = load_groups(USERS_FILE)

    for user_chat in user_chats:
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            await context.bot.send_message(
                chat_id=user_chat,
                text=header,
                parse_mode='MarkdownV2'
            )
            # –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º (–∫–æ–ø–∏—Ä—É–µ–º) –∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            await context.bot.copy_message(
                chat_id=user_chat,
                from_chat_id=update.message.chat.id,
                message_id=update.message.message_id
            )
            await update.message.reply_text(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {user_chat}.")
        except BadRequest as e:
            logger.error(f"BadRequest error while sending to {user_chat}: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {user_chat}.")
        except Exception as e:
            logger.error(f"Unexpected error while sending to {user_chat}: {e}")
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {user_chat}.")



async def get_groups_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_admin(update, context):
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    groups = []
    for filename in [USERS_FILE, ADMINS_FILE]:
        with open(filename, "r") as f:
            for chat_id in f.readlines():
                chat_id = chat_id.strip()
                if chat_id:
                    try:
                        chat = await context.bot.get_chat(chat_id)
                        title = escape_markdownv2(chat.title)
                        group_type = 'üë®üèª‚Äçüíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è' if filename == USERS_FILE else 'üë®üèª‚Äçüîß –ê–¥–º–∏–Ω—Å–∫–∞—è'
                        groups.append(f"{group_type} –≥—Ä—É–ø–ø–∞: *{title}* \nID: `{chat_id}`")
                    except Exception as e:
                        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
    response = "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n\n" + "\n\n".join(groups)
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    messages_to_send = split_message(response)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Å—Ç—è–º
    for msg in messages_to_send:
        await update.message.reply_text(msg, parse_mode='MarkdownV2')


async def handle_group_management(update: Update, context: ContextTypes.DEFAULT_TYPE, file: str, add: bool):
    if not await check_admin(update, context):
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    chat_id = update.message.text.split()[-1]
    if not chat_id.startswith('-'):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã")
        return
    success = update_file(file, chat_id, add)
    action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ" if add else "—É–¥–∞–ª–µ–Ω–∞ ‚ùå"
    if success:
        await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ {chat_id} {action}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

def split_message(message_text: str, max_length: int = 4096):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ–≥–æ –¥–ª–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç (4096 —Å–∏–º–≤–æ–ª–æ–≤).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
    if len(message_text) <= max_length:
        return [message_text]

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_length —Å–∏–º–≤–æ–ª–æ–≤
    messages = []
    while len(message_text) > max_length:
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –ª–∏–º–∏—Ç
        part = message_text[:max_length]
        messages.append(part)
        message_text = message_text[max_length:]

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if message_text:
        messages.append(message_text)

    return messages

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        return
    chat_id = str(update.effective_chat.id)
    message = update.message

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
    user_chats = set(load_groups(USERS_FILE))
    admin_chats = set(load_groups(ADMINS_FILE))
    is_user_chat = chat_id in user_chats
    is_admin_chat = chat_id in admin_chats

    if not (is_user_chat or is_admin_chat):
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if is_user_chat:
        await handle_user_message(update, context)
    elif is_admin_chat:
        await handle_admin_message(update, context)


async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = str(update.effective_chat.id)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏:
    # - –µ—Å—Ç—å —Ä–µ–ø–ª–∞–π, –∏–ª–∏
    # - —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞, –∏–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º /on.
    if not ((message.text and f"@{context.bot.username}" in message.text) or
            states.get(chat_id, False) or
            message.reply_to_message):
        return

    admin_chats = load_groups(ADMINS_FILE)
    user = message.from_user
    chat = await context.bot.get_chat(chat_id)
    header_text = (
        f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã *{escape_markdownv2(chat.title)}*\n"
        f"–û—Ç: @{escape_markdownv2(user.username)}\n"
        f"ID –≥—Ä—É–ø–ø—ã: `{chat_id}`"
    )

    success = False
    for admin_chat in admin_chats:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await context.bot.send_message(
                chat_id=admin_chat,
                text=header_text,
                parse_mode='MarkdownV2'
            )
            if message.reply_to_message:
                if message.reply_to_message.from_user.id == context.bot.id:
                    # –†–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ ‚Äì —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.copy_message(
                        chat_id=admin_chat,
                        from_chat_id=chat_id,
                        message_id=message.message_id
                    )
                else:
                    # –†–µ–ø–ª–∞–π –Ω–∞ –ù–ï-–±–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:
                    # —Å–Ω–∞—á–∞–ª–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ (–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–ª–∏ —Ä–µ–ø–ª–∞–π), –∑–∞—Ç–µ–º —Å–∞–º–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.copy_message(
                        chat_id=admin_chat,
                        from_chat_id=message.reply_to_message.chat.id,
                        message_id=message.reply_to_message.message_id
                    )
                    await context.bot.copy_message(
                        chat_id=admin_chat,
                        from_chat_id=chat_id,
                        message_id=message.message_id
                    )
            else:
                # –ï—Å–ª–∏ —Ä–µ–ø–ª–∞—è –Ω–µ—Ç ‚Äì –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.copy_message(
                    chat_id=admin_chat,
                    from_chat_id=chat_id,
                    message_id=message.message_id
                )
            success = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É {admin_chat}: {e}")
    if success:
        await update.message.reply_text("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É(–∞–º).")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")



async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = str(update.effective_chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø–ª–∞–µ–º
    if message.reply_to_message:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–ø–ª–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç –±–æ—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if message.reply_to_message.from_user.id == context.bot.id:
            original_text = message.reply_to_message.text
            if "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã" in original_text:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    parts = original_text.split('\n')
                    group_id = parts[2].split(': ')[-1].strip('`')

                    admin = message.from_user
                    header_text = (
                        f"‚úâÔ∏è –û—Ç–≤–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã *{escape_markdownv2(update.effective_chat.title)}*\n"
                        f"–û—Ç: @{escape_markdownv2(admin.username)}\n"
                        f"ID –≥—Ä—É–ø–ø—ã: `{update.effective_chat.id}`"
                    )
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É
                    await context.bot.send_message(
                        chat_id=group_id,
                        text=header_text,
                        parse_mode='MarkdownV2'
                    )
                    await context.bot.copy_message(
                        chat_id=group_id,
                        from_chat_id=chat_id,
                        message_id=message.message_id
                    )
                    await update.message.reply_text(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}.")
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")
                    await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            else:
                # –ï—Å–ª–∏ —Ä–µ–ø–ª–∞–π –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º: ‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã."
                )
        else:
            # –†–µ–ø–ª–∞–π –Ω–∞ –ù–ï-–±–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–¥–≤–æ–π–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞)
            user_chats = load_groups(USERS_FILE)
            admin = message.from_user
            header_text = (
                f"‚úâÔ∏è –û—Ç–≤–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã *{escape_markdownv2(update.effective_chat.title)}*\n"
                f"–û—Ç: @{escape_markdownv2(admin.username)}"
            )
            success = False
            for user_chat in user_chats:
                try:
                    await context.bot.send_message(
                        chat_id=user_chat,
                        text=header_text,
                        parse_mode='MarkdownV2'
                    )
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–ª–∏ —Ä–µ–ø–ª–∞–π)
                    await context.bot.copy_message(
                        chat_id=user_chat,
                        from_chat_id=message.reply_to_message.chat.id,
                        message_id=message.reply_to_message.message_id
                    )
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.copy_message(
                        chat_id=user_chat,
                        from_chat_id=chat_id,
                        message_id=message.message_id
                    )
                    success = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø—É {user_chat}: {e}")
            if success:
                await update.message.reply_text("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã.")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–ø–ª–∞–π, –Ω–æ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º /on
        if (message.text and f"@{context.bot.username}" in message.text) or states.get(chat_id, False):
            user_chats = load_groups(USERS_FILE)
            if not user_chats:
                await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≥—Ä—É–ø–ø –ø—É—Å—Ç.")
                return

            keyboard = []
            keyboard.append([InlineKeyboardButton("*Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="send_to_all")])
            for user_chat in user_chats:
                try:
                    chat = await context.bot.get_chat(user_chat)
                    button_text = chat.title[:20]
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=f"send_to_group_{user_chat}")])
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {user_chat}: {e}")
                    continue

            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action = query.data
    admin_chat_id = str(query.message.chat.id)

    if not await check_admin(update, context):
        await query.edit_message_text("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    user_chats = load_groups(USERS_FILE)
    if not user_chats:
        await query.edit_message_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≥—Ä—É–ø–ø –ø—É—Å—Ç.")
        return

    original_message = query.message.reply_to_message
    if not original_message:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    admin = original_message.from_user
    admin_chat = await context.bot.get_chat(admin_chat_id)
    header_text = f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã *{escape_markdownv2(admin_chat.title)}*\n–û—Ç: @{escape_markdownv2(admin.username)}"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–≤–æ–π–Ω—É—é –ø–µ—Ä–µ—Å—ã–ª–∫—É:
    # –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–∞–Ω —Ä–µ–ø–ª–∞–π, —Å–∞–º–æ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–ø–ª–∞–µ–º–æ–º –∏ –Ω–µ –æ—Ç –±–æ—Ç–∞.
    dual_forward = False
    if original_message.reply_to_message and original_message.reply_to_message.from_user.id != context.bot.id:
        dual_forward = True

    if action == "send_to_all":
        for user_chat in user_chats:
            try:
                await context.bot.send_message(
                    chat_id=user_chat,
                    text=header_text,
                    parse_mode='MarkdownV2'
                )
                if dual_forward:
                    await context.bot.copy_message(
                        chat_id=user_chat,
                        from_chat_id=original_message.reply_to_message.chat.id,
                        message_id=original_message.reply_to_message.message_id
                    )
                    await context.bot.copy_message(
                        chat_id=user_chat,
                        from_chat_id=original_message.chat.id,
                        message_id=original_message.message_id
                    )
                else:
                    await context.bot.copy_message(
                        chat_id=user_chat,
                        from_chat_id=original_message.chat.id,
                        message_id=original_message.message_id
                    )
                await context.bot.send_message(chat_id=admin_chat_id, text=f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {user_chat}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {user_chat}: {e}")
                await context.bot.send_message(chat_id=admin_chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {user_chat}.")
        await query.edit_message_text("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã.")
    elif action.startswith("send_to_group_"):
        group_id = action.split("_")[-1]
        if group_id in user_chats:
            try:
                await context.bot.send_message(
                    chat_id=group_id,
                    text=header_text,
                    parse_mode='MarkdownV2'
                )
                if dual_forward:
                    await context.bot.copy_message(
                        chat_id=group_id,
                        from_chat_id=original_message.reply_to_message.chat.id,
                        message_id=original_message.reply_to_message.message_id
                    )
                    await context.bot.copy_message(
                        chat_id=group_id,
                        from_chat_id=original_message.chat.id,
                        message_id=original_message.message_id
                    )
                else:
                    await context.bot.copy_message(
                        chat_id=group_id,
                        from_chat_id=original_message.chat.id,
                        message_id=original_message.message_id
                    )
                await query.edit_message_text(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}.")
                await context.bot.send_message(chat_id=admin_chat_id, text=f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
                await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {group_id}.")
                await context.bot.send_message(chat_id=admin_chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {group_id}.")
        else:
            await query.edit_message_text(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≥—Ä—É–ø–ø.")



def escape_markdownv2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.
    """
    reserved_chars = r"_*[]()~`>#+-=|{}.!"
    return "".join(f"\\{char}" if char in reserved_chars else char for char in text)

def main():
    application = Application.builder().token(TOKEN).connection_pool_size(8).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("on", on_command))
    application.add_handler(CommandHandler("off", off_command))
    application.add_handler(CommandHandler("all", all_command))
    application.add_handler(CommandHandler("get_groups_id", get_groups_id))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
    application.add_handler(CommandHandler("add_user_group",
        lambda u,c: handle_group_management(u,c, USERS_FILE, True)))
    application.add_handler(CommandHandler("del_user_group",
        lambda u,c: handle_group_management(u,c, USERS_FILE, False)))
    application.add_handler(CommandHandler("add_admin_group",
        lambda u,c: handle_group_management(u,c, ADMINS_FILE, True)))
    application.add_handler(CommandHandler("del_admin_group",
        lambda u,c: handle_group_management(u,c, ADMINS_FILE, False)))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    application.run_polling()

if __name__ == "__main__":
    main()
